// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int butler_start(
    ffi.Pointer<butler_params> m_params,
  ) {
    return _butler_start(
      m_params,
    );
  }

  late final _butler_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<butler_params>)>>(
          'butler_start');
  late final _butler_start =
      _butler_startPtr.asFunction<int Function(ffi.Pointer<butler_params>)>();

  int butler_continue(
    ffi.Pointer<ffi.Char> input,
    ffi.Pointer<maid_output_cb> maid_output,
  ) {
    return _butler_continue(
      input,
      maid_output,
    );
  }

  late final _butler_continuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<maid_output_cb>)>>('butler_continue');
  late final _butler_continue = _butler_continuePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<maid_output_cb>)>();

  void butler_stop() {
    return _butler_stop();
  }

  late final _butler_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('butler_stop');
  late final _butler_stop = _butler_stopPtr.asFunction<void Function()>();

  void butler_exit() {
    return _butler_exit();
  }

  late final _butler_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('butler_exit');
  late final _butler_exit = _butler_exitPtr.asFunction<void Function()>();
}

class butler_params extends ffi.Struct {
  external ffi.Pointer<ffi.Char> model_path;

  external ffi.Pointer<ffi.Char> prompt;

  external ffi.Pointer<ffi.Char> antiprompt;
}

typedef maid_output_cb
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>;

const int _POSIX_C_SOURCE = 200112;
