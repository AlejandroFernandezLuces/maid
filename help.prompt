Widget build(BuildContext context) {
return Scaffold(
  appBar: AppBar(
flexibleSpace: Container(
  decoration: BoxDecoration(
gradient: LinearGradient(
  begin: Alignment.centerLeft,
  end: Alignment.centerRight,
  colors: <Color>[
Colors.purple.shade900.withAlpha(900),
Colors.cyan.shade900.withAlpha(900),
  ],
),
  ),
),
title: Text(widget.title),
actions: [
  IconButton(
icon: const Icon(Icons.info_outline),
onPressed: () {
  showInfosAlert();
},
  ),
],
  ),
  body: Stack(
children: [
  Container(
decoration: BoxDecoration(
  gradient: LinearGradient(
begin: Alignment.topLeft,
end: Alignment.bottomRight,
colors: [
  Colors.purple.shade900,
  Colors.cyan.shade900,
],
  ),
),
  ),
  SingleChildScrollView(
child: Center(
  child: ConstrainedBox(
constraints: const BoxConstraints(
  maxWidth: 700,
),
child: Padding(
  padding: const EdgeInsets.symmetric(horizontal: 8.0),
  child: Column(
mainAxisAlignment: MainAxisAlignment.center,
children: <Widget>[
  const SizedBox(
height: 20,
  ),
  Align(
alignment: Alignment.centerRight,
child: ElevatedButton(
  onPressed: () {
setState(() {
  showParams = !showParams;
});
  },
  child: const Icon(
Icons.settings,
color: Colors.white,
  ),
),
  ),
  if (showParams)
Padding(
  padding: const EdgeInsets.all(8.0),
  child: Wrap(
children: [
  const Text(
'Your RAM:',
  ),
  Text(
_ram,
style: TextStyle(
color: color, fontWeight: FontWeight.bold),
  ),
],
  ),
),
  if (fileState == FileState.notFound)
Padding(
  padding: const EdgeInsets.all(8.0),
  child: Wrap(
crossAxisAlignment: WrapCrossAlignment.center,
alignment: WrapAlignment.center,
children: [
  const Text(
'Please download a compatible GGML model.\n'
'Then open it here.\n',
textAlign: TextAlign.center,
style: TextStyle(color: Colors.red),
  ),
  ElevatedButton(
onPressed: () async {
  openFile();
},
child: const Text(
  "Open file",
  style: TextStyle(color: Colors.white),
),
  ),
],
  ),
),
  if (fileState == FileState.found) ...[
if (showParams) ...[
  Padding(
padding: const EdgeInsets.all(8.0),
child: Column(
  children: [
Wrap(
  alignment: WrapAlignment.center,
  crossAxisAlignment: WrapCrossAlignment.center,
  children: [
const Text("Change Model"),
Padding(
  padding: const EdgeInsets.all(8.0),
  child: SizedBox(
width: 30,
height: 30,
child: ElevatedButton(
onPressed: () async {
  await ModelFilePath
  .deleteModelFile();
  setState(() {
fileState = FileState.notFound;
  });
},
style: ElevatedButton.styleFrom(
  backgroundColor: Colors.red,
  padding:
  const EdgeInsets.all(0.0),
),
child: const Text(
  "X",
  style: TextStyle(
  color: Colors.white),
)),
  ),
),
  ],
),
Wrap(
  alignment: WrapAlignment.center,
  crossAxisAlignment: WrapCrossAlignment.center,
  children: [
ElevatedButton(
onPressed: showPrepromptAlert,
child: const Text(
  "Pre-Prompt",
  style: TextStyle(
color: Colors.white,
fontWeight: FontWeight.bold,
  ),
)),
Padding(
  padding: const EdgeInsets.all(8.0),
  child: SizedBox(
width: 30,
height: 30,
child: ElevatedButton(
onPressed: deletePreprompt,
style: ElevatedButton.styleFrom(
  backgroundColor: Colors.red,
  padding:
  const EdgeInsets.all(0.0),
),
child: const Text(
  "X",
  style: TextStyle(
  color: Colors.white),
)),
  ),
),
Padding(
  padding: const EdgeInsets.all(8.0),
  child: ConstrainedBox(
constraints: const BoxConstraints(
  maxHeight: 200,
),
child: Padding(
  padding: const EdgeInsets.all(8.0),
  child: SingleChildScrollView(
child: SelectableText(
  "Pre-Prompt : $prePrompt",
  style: const TextStyle(
fontWeight: FontWeight.bold,
  ),
),
  ),
),
  ),
),
  ],
),
Padding(
  padding: const EdgeInsets.all(8.0),
  child: TextField(
keyboardType: TextInputType.multiline,
maxLines: 1,
expands: false,
controller: reversePromptController,
decoration: InputDecoration(
  border: const OutlineInputBorder(),
  labelStyle: const TextStyle(
color: Colors.cyan,
  ),
  labelText: 'Reverse Prompt',
  suffixIcon: IconButton(
  onPressed: () {
reversePromptController.clear();
  },
  icon: const Icon(Icons.clear)),
),
  ),
),
  ],
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ElevatedButton(
  onPressed: toggleShowFineTune,
  child: Text(
showParamsFineTune
? "Hide Params"
: "Show Params",
style: const TextStyle(color: Colors.white),
  ),
),
  ),
  if (showParamsFineTune)
Padding(
  padding: const EdgeInsets.all(8.0),
  child: Container(
decoration: BoxDecoration(
  border: Border.all(color: Colors.cyan),
  borderRadius: BorderRadius.circular(5),
),
child: Padding(
  padding: const EdgeInsets.all(8.0),
  child: Column(
children: [
  const Text(
"Once you start a conversation, you cannot change the params.",
style: TextStyle(
  fontWeight: FontWeight.bold,
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ElevatedButton(
  onPressed: () {
paramsLlama.resetAll(setState);
  },
  child: const Text(
"Reset All",
style: TextStyle(
  color: Colors.white,
  fontWeight: FontWeight.bold,
),
  ),
),
  ),
  Wrap(
children: [
  //ParamsLlama(),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
children: [
  const Text(
'seed (-1 for random):',
  ),
  TextField(
controller: paramsLlama
.seedController,
keyboardType:
TextInputType.number,
decoration:
const InputDecoration(
  hintText: 'seed',
),
  ),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
children: [
  const Text(
'n_threads:',
  ),
  TextField(
controller: paramsLlama
.n_threadsController,
keyboardType:
TextInputType.number,
decoration:
const InputDecoration(
  hintText: 'n_threads',
),
  ),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
children: [
  const Text(
'n_predict:',
  ),
  TextField(
controller: paramsLlama
.n_predictController,
keyboardType:
TextInputType.number,
decoration:
const InputDecoration(
  hintText: 'n_predict',
),
  ),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
children: [
  const Text(
'repeat_last_n:',
  ),
  TextField(
controller: paramsLlama
.repeat_last_nController,
keyboardType:
TextInputType.number,
decoration:
const InputDecoration(
  hintText: 'repeat_last_n',
),
  ),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
children: [
  const Text(
'n_parts (-1 for auto):',
  ),
  TextField(
controller: paramsLlama
.n_partsController,
keyboardType:
TextInputType.number,
decoration:
const InputDecoration(
  hintText: 'n_parts',
),
  ),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
children: [
  const Text(
'n_ctx:',
  ),
  TextField(
controller: paramsLlama
.n_ctxController,
keyboardType:
TextInputType.number,
decoration:
const InputDecoration(
  hintText: 'n_ctx',
),
  ),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
children: [
  const Text(
'top_k:',
  ),
  TextField(
controller: paramsLlama
.top_kController,
keyboardType:
TextInputType.number,
decoration:
const InputDecoration(
  hintText: 'top_k',
),
  ),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
children: [
  const Text(
'top_p:',
  ),
  TextField(
controller: paramsLlama
.top_pController,
keyboardType:
TextInputType.number,
decoration:
const InputDecoration(
  hintText: 'top_p',
),
  ),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
children: [
  const Text(
'temp:',
  ),
  TextField(
controller: paramsLlama
.tempController,
keyboardType:
TextInputType.number,
decoration:
const InputDecoration(
  hintText: 'temp',
),
  ),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
children: [
  const Text(
'repeat_penalty:',
  ),
  TextField(
controller: paramsLlama
.repeat_penaltyController,
keyboardType:
TextInputType.number,
decoration:
const InputDecoration(
  hintText:
  'repeat_penalty',
),
  ),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
children: [
  const Text(
'batch_size:',
  ),
  TextField(
controller: paramsLlama
.n_batchController,
keyboardType:
TextInputType.number,
decoration:
const InputDecoration(
  hintText: 'batch_size',
),
  ),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
alignment: WrapAlignment.center,
crossAxisAlignment:
WrapCrossAlignment.center,
children: [
  const Text(
'memory_f16:',
  ),
  Checkbox(
  value: paramsLlama
  .memory_f16,
  onChanged: (value) {
setState(() {
  paramsLlama
  .memory_f16 =
  value!;
});
paramsLlama
.saveBoolToSharedPrefs(
'memory_f16',
value!);
  }),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
alignment: WrapAlignment.center,
crossAxisAlignment:
WrapCrossAlignment.center,
children: [
  const Text(
'random_prompt:',
  ),
  Checkbox(
  value: paramsLlama
  .random_prompt,
  onChanged: (value) {
setState(() {
  paramsLlama
  .random_prompt =
  value!;
});
paramsLlama
.saveBoolToSharedPrefs(
'random_prompt',
value!);
  }),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
alignment: WrapAlignment.center,
crossAxisAlignment:
WrapCrossAlignment.center,
children: [
  const Text(
'interactive:',
  ),
  Checkbox(
  value: paramsLlama
  .interactive,
  onChanged: (value) {
setState(() {
  paramsLlama
  .interactive =
  value!;
});
paramsLlama
.saveBoolToSharedPrefs(
'interactive',
value!);
  }),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
alignment: WrapAlignment.center,
crossAxisAlignment:
WrapCrossAlignment.center,
children: [
  const Text(
'interactive_start:',
  ),
  Checkbox(
  value: paramsLlama
  .interactive_start,
  onChanged: (value) {
setState(() {
  paramsLlama
  .interactive_start =
  value!;
});
paramsLlama
.saveBoolToSharedPrefs(
'interactive_start',
value!);
  }),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
alignment: WrapAlignment.center,
crossAxisAlignment:
WrapCrossAlignment.center,
children: [
  const Text(
'instruct (Chat4all and Alpaca):',
  ),
  Checkbox(
  value:
  paramsLlama.instruct,
  onChanged: (value) {
setState(() {
  paramsLlama.instruct =
  value!;
});
paramsLlama
.saveBoolToSharedPrefs(
'instruct',
value!);
  }),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
alignment: WrapAlignment.center,
crossAxisAlignment:
WrapCrossAlignment.center,
children: [
  const Text(
'ignore_eos:',
  ),
  Checkbox(
  value: paramsLlama
  .ignore_eos,
  onChanged: (value) {
setState(() {
  paramsLlama
  .ignore_eos =
  value!;
});
paramsLlama
.saveBoolToSharedPrefs(
'ignore_eos',
value!);
  }),
],
  ),
),
  ),
  Padding(
padding: const EdgeInsets.all(8.0),
child: ConstrainedBox(
  constraints: const BoxConstraints(
maxWidth: 150,
  ),
  child: Wrap(
alignment: WrapAlignment.center,
crossAxisAlignment:
WrapCrossAlignment.center,
children: [
  const Text(
'perplexity:',
  ),
  Checkbox(
  value: paramsLlama
  .perplexity,
  onChanged: (value) {
setState(() {
  paramsLlama
  .perplexity =
  value!;
});
paramsLlama
.saveBoolToSharedPrefs(
'perplexity',
value!);
  }),
],
  ),
),
  ),
],
  ),
],
  ),
),
  ),
),
  ElevatedButton(
onPressed: toggleShowLog,
child: Text(
  showLog ? "Hide Log" : "Show Log",
  style: const TextStyle(color: Colors.white),
),
  ),
  if (showLog)
Padding(
  padding: const EdgeInsets.all(8.0),
  child: Container(
decoration: BoxDecoration(
  border: Border.all(color: Colors.cyan),
  borderRadius: BorderRadius.circular(5),
),
child: Column(
  children: [
const Padding(
  padding: EdgeInsets.only(top: 8.0),
  child: Text("Log"),
),
ConstrainedBox(
  constraints: const BoxConstraints(
maxHeight: 200,
  ),
  child: Padding(
padding: const EdgeInsets.all(8.0),
child: SingleChildScrollView(
  child: SizedBox(
width: double.infinity,
child: Padding(
  padding:
  const EdgeInsets.all(8.0),
  child: Container(
decoration: BoxDecoration(
  border: Border.all(
  color: Colors.black),
  borderRadius:
  BorderRadius.circular(5),
  color: Colors.black,
),
child: Padding(
  padding:
  const EdgeInsets.all(8.0),
  child: Text(
log,
style: const TextStyle(
color: Colors.white),
  ),
),
  ),
),
  ),
),
  ),
),
  ],
),
  ),
),
],
const Text(
  "Chat now !",
  style: TextStyle(
fontWeight: FontWeight.bold,
  ),
),
Stack(
  children: [
//top right button to copy the result
ConstrainedBox(
  constraints: BoxConstraints(
  maxHeight:
  MediaQuery.of(context).size.height - 200),
  child: Padding(
padding: const EdgeInsets.all(8.0),
child: SingleChildScrollView(
  controller: _consoleScrollController,
  child: SizedBox(
width: double.infinity,
child: Padding(
  padding: const EdgeInsets.all(8.0),
  child: Container(
decoration: BoxDecoration(
  border:
  Border.all(color: Colors.black),
  borderRadius:
  BorderRadius.circular(5),
  color: Colors.black,
),
child: Padding(
  padding: const EdgeInsets.all(12.0),
  child: SelectableText(
result,
style: const TextStyle(
color: Colors.white),
  ),
),
  ),
),
  ),
),
  ),
),
if (result.isNotEmpty)
  Positioned(
top: 12,
right: 8,
child: ElevatedButton(
  style: ElevatedButton.styleFrom(
shape: const CircleBorder(),
padding: const EdgeInsets.all(0),
backgroundColor:
Colors.blueGrey.withOpacity(0.5),
  ),
  onPressed: () {
Clipboard.setData(
ClipboardData(text: result));
//delete the toast if it is already present
ScaffoldMessenger.of(context)
.removeCurrentSnackBar();
ScaffoldMessenger.of(context).showSnackBar(
  const SnackBar(
content:
Text("Text copied to clipboard"),
  ),
);
  },
  child: Icon(
Icons.copy,
color: Colors.white.withOpacity(0.5),
  ),
),
  ),
  ],
),
Wrap(
  alignment: WrapAlignment.center,
  crossAxisAlignment: WrapCrossAlignment.center,
  children: [
TextField(
  keyboardType: TextInputType.multiline,
  // maxLines: 3,
  //on enter send the message
  onSubmitted: (value) {
_exec();
  },
  expands: false,
  controller: promptController,
  decoration: InputDecoration(
border: const OutlineInputBorder(),
labelStyle: const TextStyle(
  color: Colors.cyan,
),
labelText: 'Prompt',
suffixIcon: Padding(
  padding: const EdgeInsets.only(right: 4.0),
  child: Row(
mainAxisSize: MainAxisSize.min,
children: [
  ElevatedButton(
onPressed: (inProgress) ? null : _exec,
style: ElevatedButton.styleFrom(
  padding: const EdgeInsets.symmetric(
  horizontal: 5, vertical: 5),
),
child: Column(
  mainAxisSize: MainAxisSize.min,
  children: [
if (!inProgress)
  const Icon(
Icons.send_sharp,
color: Colors.white,
  ),
if (inProgress)
  const Padding(
padding: EdgeInsets.all(8.0),
child: SizedBox(
  height: 20,
  width: 20,
  child:
  CircularProgressIndicator(
color: Colors.white,
  ),
),
  ),
  ],
),
  ),
  const SizedBox(width: 5),
  if (canStop && inProgress)
ElevatedButton(
  onPressed: _cancel,
  style: ElevatedButton.styleFrom(
padding: const EdgeInsets.symmetric(
horizontal: 5, vertical: 5),
  ),
  child: const Icon(
Icons.stop,
color: Colors.white,
  ),
),
],
  ),
),
  ),
),
  ],
),
  ],
  if (fileState == FileState.opening)
Center(
  child: Padding(
padding: const EdgeInsets.all(8.0),
child: Column(
  children: const [
Text(
  "Opening file...\nPlease wait a minute...",
  textAlign: TextAlign.center,
),
Padding(
  padding: EdgeInsets.all(8.0),
  child: SizedBox(
height: 20,
width: 20,
child: CircularProgressIndicator(),
  ),
),
  ],
),
  ),
),
],
  ),
),
  ),
),
  ),
],
  ),
);
  }
}